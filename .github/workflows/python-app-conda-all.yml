# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python All conda OS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-18.04', 'macos-latest']

    steps:
    - name: Set up Python 3.7
      uses: actions/setup-python@v3
      with:
        python-version: "3.7"
    - uses: actions/checkout@v3
    - uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: 3.7
        auto-activate-base: True
    - name: Install dependencies
      run: |
        conda create -n gogo python=3.7
        conda init bash
        conda activate gogo        
        conda install numpy scipy
        #python -m pip install --upgrade pip
        pip install .
        pip install pyinstaller
    - name: Run Pyinstaller 1
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller -c --icon=./src/exe/tigerbet/ico.ico --add-data "./src/exe/tigerbet/onnxruntime_providers_shared.dll;onnxruntime/capi" -F ./src/exe/tigerbet/tigerbet.py
    - name: Run Pyinstaller  2
      if: matrix.os == 'ubuntu-18.04'
      run: |
        pyinstaller -c --icon=./src/exe/tigerbet/ico.ico --add-data ./src/exe/tigerbet/libonnxruntime_providers_shared.so:onnxruntime/capi -F ./src/exe/tigerbet/tigerbet.py
    - name: Run Pyinstaller 3
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller -c --icon=./src/exe/tigerbet/ico.ico --add-data ./src/exe/tigerbet/libonnxruntime_providers_shared.so:onnxruntime/capi -F ./src/exe/tigerbet/tigerbet.py
        
    - uses: actions/upload-artifact@v3
      with:
        name: tigerbet-${{ matrix.os }}
        path: dist/*
